# ===================================================================
# Resume Editor AI - Environment Configuration Template
# ===================================================================
# Copy this file to .env and configure with your actual values
# DO NOT commit .env to version control - it contains sensitive data
# ===================================================================

# === Core Application Configuration ===
NODE_ENV=development                    # development | production | test
PORT=3000                              # Server port (default: 3000)

# === API Keys (REQUIRED) ===
# Get your Gemini API key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your_google_gemini_api_key_here

# === External Services ===
# LaTeX compilation service (default works, but you can self-host)
LATEX_ONLINE_URL=https://latexonline.cc/compile

# === Database Configuration (Optional - Currently not used) ===
# MongoDB connection string for future data persistence features
MONGODB_URI=mongodb://localhost:27017/resume_editor

# === Redis Configuration (Optional but Recommended) ===
# Redis is used for caching and queue management
# Without Redis, the app will work but with degraded performance
REDIS_URL=redis://localhost:6379

# === Queue System Configuration (Requires Redis) ===
# Background job processing configuration
QUEUE_REDIS_HOST=localhost
QUEUE_REDIS_PORT=6379
QUEUE_REDIS_DB=1

# === Security Configuration ===
# Generate strong secrets for production
# Use: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your_jwt_secret_for_future_authentication_features
SESSION_SECRET=your_session_secret_for_future_session_management

# === Rate Limiting Configuration ===
# General API rate limiting
RATE_LIMIT_WINDOW_MS=900000            # 15 minutes in milliseconds
RATE_LIMIT_MAX_REQUESTS=100            # Max requests per window

# AI-specific rate limiting (handled in code)
# AI operations: 10 requests per minute
# PDF operations: 20 requests per 5 minutes

# === Logging Configuration ===
# Log levels: error, warn, info, http, verbose, debug, silly
LOG_LEVEL=info
LOG_FILE_ENABLED=true

# === CORS Configuration (Production) ===
# Comma-separated list of allowed origins
# CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# === SSL Configuration (Production) ===
# SSL_ENABLED=false
# SSL_CERT_PATH=/path/to/certificate.crt
# SSL_KEY_PATH=/path/to/private.key

# === Performance Configuration ===
# Template cache TTL in seconds (default: 300 = 5 minutes)
TEMPLATE_CACHE_TTL=300

# PDF cache TTL in seconds (default: 600 = 10 minutes)
PDF_CACHE_TTL=600

# Max file upload size in bytes (default: 10MB)
MAX_FILE_SIZE=10485760

# === Development Configuration ===
# Enable detailed error responses in development
DEBUG_MODE=true

# Enable request logging in development
REQUEST_LOGGING=true

# === Production Configuration Notes ===
# For production deployment:
# 1. Set NODE_ENV=production
# 2. Use strong, unique secrets for JWT_SECRET and SESSION_SECRET
# 3. Configure Redis for optimal performance
# 4. Set appropriate CORS_ORIGINS
# 5. Consider enabling SSL_ENABLED with valid certificates
# 6. Monitor logs and adjust LOG_LEVEL as needed
# 7. Configure your reverse proxy (nginx, Apache) if applicable

# === Service Health Check URLs ===
# These are used by the system health checks
# Modify if you're using different service endpoints
# HEALTH_CHECK_GEMINI_URL=https://generativelanguage.googleapis.com/v1beta/models
# HEALTH_CHECK_LATEX_URL=https://latexonline.cc

# === Example Production Configuration ===
# NODE_ENV=production
# PORT=3000
# GEMINI_API_KEY=AIzaSyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# REDIS_URL=redis://your-redis-server:6379
# JWT_SECRET=af2c8b4e7d9f1a3e5c7b9d1f3e5a7c9b1d3f5e7a9c1e3f5a7c9b1d3f5e7a9c1e
# SESSION_SECRET=1a3e5c7b9d1f3e5a7c9b1d3f5e7a9c1e3f5a7c9b1d3f5e7a9c1e3f5a7c9b1d3f
# CORS_ORIGINS=https://yourdomain.com,https://app.yourdomain.com
# SSL_ENABLED=true
# SSL_CERT_PATH=/etc/ssl/certs/yourdomain.crt
# SSL_KEY_PATH=/etc/ssl/private/yourdomain.key

# === Development vs Production Differences ===
# Development:
# - Detailed error messages
# - Request logging enabled
# - Hot reloading with nodemon
# - Local Redis (optional)
# - Debug mode enabled
#
# Production:
# - Sanitized error messages
# - PM2 clustering
# - Redis recommended for performance
# - SSL termination
# - Log rotation
# - Health monitoring